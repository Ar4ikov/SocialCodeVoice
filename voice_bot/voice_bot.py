from typing import Optional

from requests import post
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlmodel import SQLModel, create_engine, Session, Field, select
from time import time
from os import rename

API_SERVER = "http://example.org"
bot = telebot.TeleBot('token', threaded=False)
engine = create_engine("sqlite:///socialcode_voice.sqlite")

ENTHUSIASM = """–ü–æ —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –Ω–∞—Å—Ç—Ä–æ–π, —ç–Ω—Ç—É–∑–∏–∞–∑–º –≤ —Ç–µ–±–µ –∫–∏–ø–∏—Ç!"""
HAPPINESS = """–ü–æ–∫–∞ —Å–ª—É—à–∞–ª —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ, –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ä–∞–¥–æ—Å—Ç—å! –≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø —Ç–æ–∂–µ —Ä–∞–¥ –∑–∞ —Ç–µ–±—è!"""
SADNESS = """–û—Ö, –ø–æ —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å–ª—ã—à—É, —á—Ç–æ —Ç—ã –≥—Ä—É—Å—Ç–∏—à—å. –ò–Ω–æ–≥–¥–∞ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –∏ –º–æ–∂–Ω–æ –ø–æ–≥—Ä—É—Å—Ç–∏—Ç—å, –≥–ª–∞–≤–Ω–æ–µ, –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ï—Å–ª–∏ —á—Ç–æ, –≤—Å–ø–æ–º–∏–Ω–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏!"""
TIREDNESS = """–û–π, —Å–ª—ã—à—É —Ç–≤–æ–π –≥–æ–ª–æ—Å –∏ —Ç–∞–º –∑–≤—É—á–∏—Ç —É—Å—Ç–∞–ª–æ—Å—Ç—å. –°–¥–µ–ª–∞–π –ø–∞—É–∑—É —Ö–æ—Ç—è –±—ã –Ω–∞ –º–∏–Ω—É—Ç—É, —Å–¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤, –∞ –ø–æ—Ç–æ–º –≤—Å–ø–æ–º–Ω–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–±, –∫–∞–∫ –º–æ–∂–Ω–æ –∑–∞—Ä—è–¥–∏—Ç—å —Å–µ–±—è —ç–Ω–µ—Ä–≥–∏–µ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"""
ANGER = """–ü–æ —Ç–≤–æ–µ–º—É –≥–æ–ª–æ—Å—É –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –∑–ª–∏–ª—Å—è, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–ª –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ. –ü–æ–¥—É–º–∞–π, —Å —á–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —ç—Ç–∞ —ç–º–æ—Ü–∏—è?"""

WELCOME_TEXT = """–ü—Ä–∏–≤–µ—Ç! –Ø —É—á—É—Å—å –ª—É—á—à–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–≤–æ—é —ç–º–æ—Ü–∏—é :)"""


class Training(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    telegram_id: int
    date: int
    voice_uuid: str
    model_result: str
    user_result: Optional[str] = Field(default=None)


def menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ", callback_data="fast_recog"),
        InlineKeyboardButton(text="–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", callback_data="long_recog"),
        InlineKeyboardButton(text="–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", callback_data="model_train")
    ]

    keyboard.add(*buttons)

    return keyboard


def feedback_keyboard(file_uuid):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="üëç", callback_data=f"like_{file_uuid}"),
        InlineKeyboardButton(text="üëé", callback_data=f"dislike_{file_uuid}"),
    ]

    keyboard.add(*buttons)

    return keyboard


def correct_answer_keyboard(file_uuid):
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text="üò°", callback_data=f"em anger {file_uuid}"),
        InlineKeyboardButton(text="üôÇ", callback_data=f"em happiness {file_uuid}"),
        InlineKeyboardButton(text="üò≠", callback_data=f"em sadness {file_uuid}"),
        InlineKeyboardButton(text="üòÑ", callback_data=f"em enthusiasm {file_uuid}"),
        InlineKeyboardButton(text="üò©", callback_data=f"em tiredness {file_uuid}")
    ]

    keyboard.add(*buttons)

    return keyboard


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, WELCOME_TEXT, reply_markup=menu_keyboard())


@bot.callback_query_handler(func=lambda call: call.data == "fast_recog")
def fast_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)

    message = bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                                   "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                                   "–±—É–¥–µ—Ç –¥–ª–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥.")

    bot.register_next_step_handler(message, short_voice_processing)


@bot.callback_query_handler(func=lambda call: call.data == "long_recog")
def long_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)

    message = bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                                                     "–ü–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è —ç–º–æ—Ü–∏–π —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                                                     "–≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ —Ç–∞–π–º–∫–æ–¥–∞–º —è —Ä–∞–∑–º–µ—á—É, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Å–º–æ–≥ —É–ª–æ–≤–∏—Ç—å "
                                                     "–≤ —Ç–≤–æ—ë–º –≥–æ–ª–æ—Å–µ)")

    bot.register_next_step_handler(message, long_voice_processing)


@bot.callback_query_handler(func=lambda call: call.data == "model_train")
def model_training(call):
    bot.answer_callback_query(call.id, text="–°–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!...")


@bot.callback_query_handler(func=lambda call: call.data.startswith("like"))
def accept_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)
    file_uuid = call.data.split("_")[1]

    session = Session(engine)
    find_voice = select(Training).where(Training.voice_uuid == file_uuid)
    find_voice = session.exec(find_voice).one_or_none()

    if find_voice:
        find_voice.user_result = find_voice.model_result
        session.add(find_voice)
        session.commit()
        session.close()

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=call.message.text)

    bot.send_message(call.message.chat.id, "–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–∏)\n"
                     "–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç–µ /start")


@bot.callback_query_handler(func=lambda call: call.data.startswith("dislike"))
def decline_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)
    file_uuid = call.data.split("_")[1]

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=call.message.text)

    bot.send_message(call.message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –•–æ—Ä–æ—à–æ, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Ç—ã :)\n"
                     "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —Å–ª–æ–∂–Ω–æ, —É–∫–∞–∂–∏, –∫–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞, –Ω–∞–∂–∞–≤ –Ω–∞ "
                     "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É", reply_markup=correct_answer_keyboard(file_uuid))


@bot.callback_query_handler(func=lambda call: call.data.startswith("em"))
def pick_emotion(call):
    bot.answer_callback_query(call.id, show_alert=False)
    emotion, file_uuid = call.data.split(" ")[1:]

    session = Session(engine)
    find_voice = select(Training).where(Training.voice_uuid == file_uuid)
    find_voice = session.exec(find_voice).one_or_none()

    if find_voice:
        find_voice.user_result = emotion
        session.add(find_voice)
        session.commit()
        session.close()

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=call.message.text)

    bot.send_message(call.message.chat.id, "–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–∏)\n"
                                           "–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç–µ /start")


@bot.message_handler(content_types=["voice"])
def long_voice_processing(message):
    file_info = bot.get_file(message.voice.file_id)

    downloaded_file = bot.download_file(file_info.file_path)

    filename = f'{message.from_user.id}.ogg'
    with open(filename, 'wb') as new_file:
        new_file.write(downloaded_file)

    response = post(API_SERVER + "/get_emotion_timeline", files={"audio.ogg": open(filename, "rb").read()})

    try:
        r_json = response.json()
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: **500**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å",
                         parse_mode="MARKDOWN")
        return False

    filename_new = r_json["response"]["file_id"] + ".ogg"
    rename(filename, filename_new)

    emotion_switch = {
        "anger": "–ó–õ–û–°–¢–¨",
        "happiness": "–°–ß–ê–°–¢–¨–ï",
        "tiredness": "–£–°–¢–ê–õ–û–°–¢–¨",
        "enthusiasm": "–≠–ù–¢–£–ó–ò–ê–ó–ú",
        "sadness": "–ì–†–£–°–¢–¨"
    }

    int_to_time = lambda x: f"{str(x // 60).zfill(2)}:{str(x % 60).zfill(2)}"
    emotions = r_json["response"]["emotions"]
    e_response = [f"{int_to_time(int(x['time_rate'] // int(22050 * 2.5) * 2.5))} -- {emotion_switch[x['emotion']]}" for x in emotions]

    bot.send_message(message.chat.id, "\n".join(e_response), parse_mode="MARKDOWN")


@bot.message_handler(content_types=["voice"])
def short_voice_processing(message):
    file_info = bot.get_file(message.voice.file_id)

    downloaded_file = bot.download_file(file_info.file_path)

    filename = f'{message.from_user.id}.ogg'
    with open(filename, 'wb') as new_file:
        new_file.write(downloaded_file)

    response = post(API_SERVER + "/get_emotion", files={"audio.ogg": open(filename, "rb").read()})

    try:
        r_json = response.json()
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: **500**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å",
                         parse_mode="MARKDOWN")
        return False

    filename_new = r_json["response"]["file_id"] + ".ogg"
    rename(filename, filename_new)

    emotion = r_json["response"]["emotion"]

    emotion_switch = {
        "anger": ("–ó–õ–û–°–¢–¨", ANGER),
        "happiness": ("–°–ß–ê–°–¢–¨–ï", HAPPINESS),
        "tiredness": ("–£–°–¢–ê–õ–û–°–¢–¨", TIREDNESS),
        "enthusiasm": ("–≠–ù–¢–£–ó–ò–ê–ó–ú", ENTHUSIASM),
        "sadness": ("–ì–†–£–°–¢–¨", SADNESS)
    }[emotion]

    bot.send_message(message.chat.id, f"{emotion_switch[0]}\n\n{emotion_switch[1]}", reply_markup=feedback_keyboard(
        file_uuid=r_json["response"]["file_id"]
    ))

    session = Session(engine)
    voice = Training(
        telegram_id=message.from_user.id,
        date=time(),
        voice_uuid=r_json["response"]["file_id"],
        model_result=emotion
    )
    session.add(voice)
    session.commit()
    session.close()


SQLModel.metadata.create_all(engine)
bot.infinity_polling()
