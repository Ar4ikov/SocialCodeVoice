from typing import Optional

from requests import post
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlmodel import SQLModel, create_engine, Session, Field, select, func, and_
from time import time
from os import rename, mkdir, path
from uuid import uuid4 as uuid

API_SERVER = "http://example.com"
bot = telebot.TeleBot('token', threaded=False)
engine = create_engine("sqlite:///socialcode_voice.sqlite")

ENTHUSIASM = """–ü–æ —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –Ω–∞—Å—Ç—Ä–æ–π, —ç–Ω—Ç—É–∑–∏–∞–∑–º –≤ —Ç–µ–±–µ –∫–∏–ø–∏—Ç!"""
HAPPINESS = """–ü–æ–∫–∞ —Å–ª—É—à–∞–ª —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ, –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ä–∞–¥–æ—Å—Ç—å! –≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø —Ç–æ–∂–µ —Ä–∞–¥ –∑–∞ —Ç–µ–±—è!"""
SADNESS = """–û—Ö, –ø–æ —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å–ª—ã—à—É, —á—Ç–æ —Ç—ã –≥—Ä—É—Å—Ç–∏—à—å. –ò–Ω–æ–≥–¥–∞ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –∏ –º–æ–∂–Ω–æ –ø–æ–≥—Ä—É—Å—Ç–∏—Ç—å, –≥–ª–∞–≤–Ω–æ–µ, –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ï—Å–ª–∏ —á—Ç–æ, –≤—Å–ø–æ–º–∏–Ω–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏!"""
TIREDNESS = """–û–π, —Å–ª—ã—à—É —Ç–≤–æ–π –≥–æ–ª–æ—Å –∏ —Ç–∞–º –∑–≤—É—á–∏—Ç —É—Å—Ç–∞–ª–æ—Å—Ç—å. –°–¥–µ–ª–∞–π –ø–∞—É–∑—É —Ö–æ—Ç—è –±—ã –Ω–∞ –º–∏–Ω—É—Ç—É, —Å–¥–µ–ª–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤, –∞ –ø–æ—Ç–æ–º –≤—Å–ø–æ–º–Ω–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–±, –∫–∞–∫ –º–æ–∂–Ω–æ –∑–∞—Ä—è–¥–∏—Ç—å —Å–µ–±—è —ç–Ω–µ—Ä–≥–∏–µ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"""
ANGER = """–ü–æ —Ç–≤–æ–µ–º—É –≥–æ–ª–æ—Å—É –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –∑–ª–∏–ª—Å—è, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–ª –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ. –ü–æ–¥—É–º–∞–π, —Å —á–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —ç—Ç–∞ —ç–º–æ—Ü–∏—è?"""

WELCOME_TEXT = """–ü—Ä–∏–≤–µ—Ç! –Ø —É—á—É—Å—å –ª—É—á—à–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–≤–æ—é —ç–º–æ—Ü–∏—é :)"""


class Training(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    telegram_id: int
    date: int
    voice_uuid: str
    model_result: str
    user_result: Optional[str] = Field(default=None)


class User(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    telegram_id: int
    sex: str
    count_records: int = Field(default=0, primary_key=False)
    count_proofed: int = Field(default=0, primary_key=False)


class Learning(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    telegram_id: int = Field(default=None, foreign_key="user.telegram_id")
    date: int
    voice_uuid: str
    emotion: str
    emotion_feedback: str = Field(default=None)
    emotion_moderate: str = Field(default=None)


def download_voice(message):
    file_info = bot.get_file(message.voice.file_id)

    downloaded_file = bot.download_file(file_info.file_path)

    filename = f'{message.from_user.id}.ogg'

    if not path.isdir(path.join(path.dirname(__file__), "voices")):
        mkdir(path.join(path.dirname(__file__), "voices"))

    with open(path.join(path.dirname(__file__), "voices", filename), 'wb') as new_file:
        new_file.write(downloaded_file)

    return filename


def menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ", callback_data="fast_recog"),
        InlineKeyboardButton(text="üó£Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", callback_data="long_recog"),
        InlineKeyboardButton(text="üß† –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", callback_data="model_train"),
        InlineKeyboardButton(text="üìë –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è", callback_data="model_checking")
    ]

    keyboard.add(*buttons)

    return keyboard


def feedback_keyboard(file_uuid):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="üëç", callback_data=f"like_{file_uuid}"),
        InlineKeyboardButton(text="üëé", callback_data=f"dislike_{file_uuid}"),
    ]

    keyboard.add(*buttons)

    return keyboard


def emotions_keyboard(key_command, file_uuid):
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text="üò° –ó–ª–æ—Å—Ç—å", callback_data=f"{key_command} anger {file_uuid}"),
        InlineKeyboardButton(text="üôÇ –°—á–∞—Å—Ç—å–µ", callback_data=f"{key_command} happiness {file_uuid}"),
        InlineKeyboardButton(text="üò≠ –ì—Ä—É—Å—Ç—å", callback_data=f"{key_command} sadness {file_uuid}"),
        InlineKeyboardButton(text="üòÑ –≠–Ω—Ç—É–∑–∏–∞–∑–º", callback_data=f"{key_command} enthusiasm {file_uuid}"),
        InlineKeyboardButton(text="üò© –£—Å—Ç–∞–ª–æ—Å—Ç—å", callback_data=f"{key_command} tiredness {file_uuid}")
    ]

    keyboard.add(*buttons)

    return keyboard


def sex_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="üôé‚Äç‚ôÇÔ∏è –ú—É–∂—á–∏–Ω–∞", callback_data="sex male"),
        InlineKeyboardButton(text="üôé‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω–∞", callback_data="sex female"),

    ]

    keyboard.add(*buttons)

    return keyboard


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, WELCOME_TEXT, reply_markup=menu_keyboard())


@bot.callback_query_handler(func=lambda call: call.data == "fast_recog")
def fast_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)

    message = bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                                   "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                                   "–±—É–¥–µ—Ç –¥–ª–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥.")

    bot.register_next_step_handler(message, short_voice_processing)


@bot.callback_query_handler(func=lambda call: call.data == "long_recog")
def long_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)

    message = bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–≤–æ–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                                                     "–ü–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è —ç–º–æ—Ü–∏–π —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                                                     "–≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ —Ç–∞–π–º–∫–æ–¥–∞–º —è —Ä–∞–∑–º–µ—á—É, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Å–º–æ–≥ —É–ª–æ–≤–∏—Ç—å "
                                                     "–≤ —Ç–≤–æ—ë–º –≥–æ–ª–æ—Å–µ)")

    bot.register_next_step_handler(message, long_voice_processing)


@bot.callback_query_handler(func=lambda call: call.data == "model_train")
def model_training(call):
    bot.answer_callback_query(call.id, show_alert=False)

    session = Session(engine)
    find_user = select(User).where(User.telegram_id == call.from_user.id)
    find_user = session.exec(find_user).one_or_none()
    session.close()

    if find_user is None:
        bot.send_message(
            call.message.chat.id,
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –º–æ—ë –æ–±—É—á–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏, —Ç—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?"
            "–≠—Ç–æ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –Ω–∞ —á—å—ë–º –≥–æ–ª–æ—Å–µ —è –±—É–¥—É –æ–±—É—á–∞—Ç—å—Å—è :)",
            reply_markup=sex_keyboard()
        )

    else:
        file_uuid = str(uuid())
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏, –∫–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ö–æ—á–µ—à—å –∑–∞–ø–µ—á–∞—Ç–ª–∏—Ç—å –≤ —Å–≤–æ–µ–º –≥–æ–ª–æ—Å–µ",
            reply_markup=emotions_keyboard("em_train", file_uuid)
        )


@bot.callback_query_handler(func=lambda call: call.data == "model_checking")
def model_checking(call):
    bot.answer_callback_query(call.id, show_alert=False)

    session = Session(engine)
    find_proof = select(Learning).where(and_(Learning.telegram_id != call.message.from_user.id,
                                             Learning.emotion_feedback == None)).order_by(func.random()).limit(1)
    find_proof = session.exec(find_proof).one_or_none()

    if find_proof:
        voice = open(path.join(path.dirname(__file__), "voices", f"{find_proof.voice_uuid}.ogg"), "rb")
        bot.send_voice(call.message.chat.id, voice)
        voice.close()

        bot.send_message(
            call.message.chat.id,
            "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å! –ú–æ–∂–µ—à—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∞—è —ç–º–æ—Ü–∏—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è "
            "–≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?",
            reply_markup=emotions_keyboard("em_proof_ns", find_proof.voice_uuid)
        )

    else:
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏! "
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ –ø–æ—á–∞—â–µ –≤–Ω–æ–≤—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –æ–±—É—á–∏—Ç—å—Å—è)",
        )

    session.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith("sex"))
def setup_sex(call):
    bot.answer_callback_query(call.id, show_alert=False)
    sex = call.data.split(" ")[1]

    user = User(telegram_id=call.from_user.id, sex=sex)
    session = Session(engine)
    session.add(user)
    session.commit()
    session.refresh(user)
    session.close()

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=call.message.text)

    file_uuid = str(uuid())
    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ö–æ—á–µ—à—å –∑–∞–ø–µ—á–∞—Ç–ª–∏—Ç—å –≤ —Å–≤–æ–µ–º –≥–æ–ª–æ—Å–µ",
        reply_markup=emotions_keyboard("em_train", file_uuid)
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("em_train"))
def pick_emotion_for_train(call):
    bot.answer_callback_query(call.id, show_alert=False)
    emotion, file_uuid = call.data.split(" ")[1:]

    emoji = {"anger": "üò°", "happiness": "üôÇ", "sadness": "üò≠", "tiredness": "üò©", "enthusiasm": "üòÑ"}[emotion]

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=f"({emoji}) " + str(call.message.text))

    message = bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ! –ê —Ç–µ–ø–µ—Ä—å –∑–∞–ø–∏—à–∏ —Å–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–æ–±–ª—é–¥–∞—Ç—å "
                                                     "–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª:\n\n"
                                                     "* –ù–µ –º–æ–ª—á–∏) –ì–æ–≤–æ—Ä–∏, —á—Ç–æ-–Ω–∏–±—É–¥—å. –ê –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å "
                                                     "—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å: `–ë–µ–ª—ã–π —Å—Ç—É–ª —Å—Ç–æ–∏—Ç –≤ —É–≥–ª—É`.\n"
                                                     "* –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –∏–º–µ–µ–Ω–æ –≥–æ–ª–æ—Å–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ—é —ç–º–æ—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é "
                                                     "—Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å\n"
                                                     "* –£–ª–æ–∂–∏—Å—å –≤ 3 —Å–µ–∫—É–Ω–¥—ã) –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≤–µ—Ä—Å—Ç–∏ —ç—Ç–æ –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "
                                                     "—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ :))")

    bot.register_next_step_handler(message, train_voice_handler, file_uuid=file_uuid, emotion=emotion)


@bot.callback_query_handler(func=lambda call: call.data.startswith("em_proof"))
def proof_emotion_in_voice(call):
    bot.answer_callback_query(call.id, show_alert=False)
    emotion, file_uuid = call.data.split(" ")[1:]

    emoji = {"anger": "üò°", "happiness": "üôÇ", "sadness": "üò≠", "tiredness": "üò©", "enthusiasm": "üòÑ"}[emotion]

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=f"({emoji}) " + str(call.message.text))

    session = Session(engine)
    find_voice = select(Learning).where(Learning.voice_uuid == file_uuid)
    find_voice = session.exec(find_voice).one_or_none()

    if find_voice.emotion_feedback is None:
        find_voice.emotion_feedback = emotion
        session.add(find_voice)
        session.commit()

    if emotion == find_voice.emotion:
        find_user = select(User).where(User.telegram_id == call.from_user.id)
        find_user = session.exec(find_user).one_or_none()
        session.add(find_user)
        session.commit()

    session.close()

    if not call.data.startswith("em_proof_ns"):

        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!")

        file_uuid = str(uuid())
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏, –∫–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ö–æ—á–µ—à—å –∑–∞–ø–µ—á–∞—Ç–ª–∏—Ç—å –≤ —Å–≤–æ–µ–º –≥–æ–ª–æ—Å–µ",
            reply_markup=emotions_keyboard("em_train", file_uuid)
        )

    else:
        session = Session(engine)
        find_proof = select(Learning).where(and_(Learning.telegram_id != call.message.from_user.id,
                                                 Learning.emotion_feedback == None)).order_by(func.random()).limit(1)
        find_proof = session.exec(find_proof).one_or_none()

        if find_proof:
            voice = open(path.join(path.dirname(__file__), "voices", f"{find_proof.voice_uuid}.ogg"), "rb")
            bot.send_voice(call.message.chat.id, voice)
            voice.close()

            bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ!")

            bot.send_message(
                call.message.chat.id,
                "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å! –ú–æ–∂–µ—à—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∞—è —ç–º–æ—Ü–∏—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è "
                "–≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?",
                reply_markup=emotions_keyboard("em_proof_ns", find_proof.voice_uuid)
            )

        else:
            bot.send_message(call.message.chat.id,
                         "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏! "
                         "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ –ø–æ—á–∞—â–µ –≤–Ω–æ–≤—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –æ–±—É—á–∏—Ç—å—Å—è)\n"
                         "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ - –Ω–∞–∂–º–∏ –Ω–∞ /start"
                         )


@bot.callback_query_handler(func=lambda call: call.data.startswith("like"))
def accept_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)
    file_uuid = call.data.split("_")[1]

    session = Session(engine)
    find_voice = select(Training).where(Training.voice_uuid == file_uuid)
    find_voice = session.exec(find_voice).one_or_none()

    if find_voice:
        find_voice.user_result = find_voice.model_result
        session.add(find_voice)
        session.commit()
        session.close()

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=f"(üëç) " + str(call.message.text))

    bot.send_message(call.message.chat.id, "–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–∏)\n"
                     "–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç–µ /start")


@bot.callback_query_handler(func=lambda call: call.data.startswith("dislike"))
def decline_recognition(call):
    bot.answer_callback_query(call.id, show_alert=False)
    file_uuid = call.data.split("_")[1]

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=f"(üëé) " + str(call.message.text))

    bot.send_message(call.message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –•–æ—Ä–æ—à–æ, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Ç—ã :)\n"
                     "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —Å–ª–æ–∂–Ω–æ, —É–∫–∞–∂–∏, –∫–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞, –Ω–∞–∂–∞–≤ –Ω–∞ "
                     "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É", reply_markup=emotions_keyboard("em_recognize", file_uuid))


@bot.callback_query_handler(func=lambda call: call.data.startswith("em_recognize"))
def pick_emotion(call):
    bot.answer_callback_query(call.id, show_alert=False)
    emotion, file_uuid = call.data.split(" ")[1:]

    emoji = {"anger": "üò°", "happiness": "üôÇ", "sadness": "üò≠", "tiredness": "üò©", "enthusiasm": "üòÑ"}[emotion]

    session = Session(engine)
    find_voice = select(Training).where(Training.voice_uuid == file_uuid)
    find_voice = session.exec(find_voice).one_or_none()

    if find_voice:
        find_voice.user_result = emotion
        session.add(find_voice)
        session.commit()
        session.close()

    bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                          text=f"({emoji}) " + str(call.message.text))

    bot.send_message(call.message.chat.id, "–í–æ—Ç –∏ —Å–ª–∞–≤–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–∏)\n"
                                           "–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç–µ /start")


def long_voice_processing(message):
    if getattr(message, "voice", None) is None:
        return True

    filename = download_voice(message)

    response = post(API_SERVER + "/get_emotion_timeline", files={"audio.ogg": open(path.join(path.dirname(__file__), "voices", filename), "rb").read()})

    try:
        r_json = response.json()
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: **500**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å",
                         parse_mode="MARKDOWN")
        return False

    filename_new = r_json["response"]["file_id"] + ".ogg"
    rename(path.join(path.dirname(__file__), "voices", filename), path.join(path.dirname(__file__), "voices", filename_new))

    emotion_switch = {
        "anger": "–ó–õ–û–°–¢–¨",
        "happiness": "–°–ß–ê–°–¢–¨–ï",
        "tiredness": "–£–°–¢–ê–õ–û–°–¢–¨",
        "enthusiasm": "–≠–ù–¢–£–ó–ò–ê–ó–ú",
        "sadness": "–ì–†–£–°–¢–¨"
    }

    int_to_time = lambda x: f"{str(x // 60).zfill(2)}:{str(x % 60).zfill(2)}"
    emotions = r_json["response"]["emotions"]
    e_response = [f"{int_to_time(int(x['time_rate'] // int(22050 * 2.5) * 2.5))} -- {emotion_switch[x['emotion']]}" for x in emotions]

    bot.send_message(message.chat.id, "\n".join(e_response), parse_mode="MARKDOWN")


def short_voice_processing(message):
    if getattr(message, "voice", None) is None:
        return True

    filename = download_voice(message)

    response = post(API_SERVER + "/get_emotion", files={"audio.ogg": open(path.join(path.dirname(__file__), "voices", filename), "rb").read()})

    try:
        r_json = response.json()
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: **500**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å",
                         parse_mode="MARKDOWN")
        return False

    filename_new = r_json["response"]["file_id"] + ".ogg"
    rename(path.join(path.dirname(__file__), "voices", filename), path.join(path.dirname(__file__), "voices", filename_new))

    emotion = r_json["response"]["emotion"]

    emotion_switch = {
        "anger": ("–ó–õ–û–°–¢–¨", ANGER),
        "happiness": ("–°–ß–ê–°–¢–¨–ï", HAPPINESS),
        "tiredness": ("–£–°–¢–ê–õ–û–°–¢–¨", TIREDNESS),
        "enthusiasm": ("–≠–ù–¢–£–ó–ò–ê–ó–ú", ENTHUSIASM),
        "sadness": ("–ì–†–£–°–¢–¨", SADNESS)
    }[emotion]

    bot.send_message(message.chat.id, f"{emotion_switch[0]}\n\n{emotion_switch[1]}", reply_markup=feedback_keyboard(
        file_uuid=r_json["response"]["file_id"]
    ))

    session = Session(engine)
    voice = Training(
        telegram_id=message.from_user.id,
        date=time(),
        voice_uuid=r_json["response"]["file_id"],
        model_result=emotion
    )
    session.add(voice)
    session.commit()
    session.close()


def train_voice_handler(message, file_uuid, emotion):
    if getattr(message, "voice", None) is None:
        return True

    filename = download_voice(message)
    filename_new = file_uuid + ".ogg"

    bot.send_message(message.chat.id, "–û–∫–µ–π, —Å–ø–∞—Å–∏–±–æ!")
    rename(path.join(path.dirname(__file__), "voices", filename), path.join(path.dirname(__file__), "voices", filename_new))

    session = Session(engine)
    voice_train = Learning(
        telegram_id=message.from_user.id,
        date=time(),
        voice_uuid=file_uuid,
        emotion=emotion
    )
    session.add(voice_train)
    session.commit()
    session.refresh(voice_train)

    find_user = select(User).where(User.telegram_id == message.from_user.id)
    find_user = session.exec(find_user).one_or_none()

    find_user.count_records += 1
    session.add(find_user)
    session.commit()
    session.refresh(find_user)

    find_proof = select(Learning).where(and_(Learning.telegram_id != message.from_user.id,
                                             Learning.emotion_feedback == None)).order_by(func.random()).limit(1)
    find_proof = session.exec(find_proof).one_or_none()

    if find_proof:
        voice = open(path.join(path.dirname(__file__), "voices", f"{find_proof.voice_uuid}.ogg"), "rb")
        bot.send_voice(message.chat.id, voice)
        voice.close()

        bot.send_message(
            message.chat.id,
            "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å! –ú–æ–∂–µ—à—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∞—è —ç–º–æ—Ü–∏—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è "
            "–≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏?",
            reply_markup=emotions_keyboard("em_proof", find_proof.voice_uuid)
        )

    else:
        bot.send_message(message.chat.id,
            "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏! "
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ –ø–æ—á–∞—â–µ –≤–Ω–æ–≤—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –æ–±—É—á–∏—Ç—å—Å—è)\n"
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ - –Ω–∞–∂–º–∏ –Ω–∞ /start"
             )

        file_uuid = str(uuid())
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏, –∫–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ö–æ—á–µ—à—å –∑–∞–ø–µ—á–∞—Ç–ª–∏—Ç—å –≤ —Å–≤–æ–µ–º –≥–æ–ª–æ—Å–µ",
            reply_markup=emotions_keyboard("em_train", file_uuid)
        )

    session.close()


SQLModel.metadata.create_all(engine)
bot.infinity_polling()
